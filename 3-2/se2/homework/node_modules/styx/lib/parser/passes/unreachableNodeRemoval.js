"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var numericMap_1 = require("../../collections/numericMap");
var numericSet_1 = require("../../collections/numericSet");
var ArrayUtils = require("../../util/arrayUtil");
var flow_1 = require("../../flow");
function removeUnreachableNodes(graph) {
    // First, traverse the graph following only outgoing edges
    // to find and collect all reachable nodes
    var reachableNodes = numericMap_1.NumericMap.create();
    collectReachableNodes(graph.entry, reachableNodes);
    // Now, traverse the entire graph following edges in both directions
    // to find and collect all unreachable nodes
    var unreachableNodes = numericMap_1.NumericMap.create();
    var visitedNodes = numericSet_1.NumericSet.create();
    for (var _i = 0, _a = reachableNodes.entries(); _i < _a.length; _i++) {
        var reachableNode = _a[_i].value;
        collectUnreachableNodes(reachableNode, reachableNodes, unreachableNodes, visitedNodes);
    }
    // Finally, delete unreachable (normal) nodes and their edges
    for (var _b = 0, _c = unreachableNodes.entries(); _b < _c.length; _b++) {
        var unreachableNode = _c[_b].value;
        if (unreachableNode.type === flow_1.NodeType.Normal) {
            removeUnreachableNode(unreachableNode);
        }
    }
}
exports.removeUnreachableNodes = removeUnreachableNodes;
function collectReachableNodes(currentNode, reachableNodes) {
    if (reachableNodes.containsKey(currentNode.id)) {
        return;
    }
    reachableNodes.set(currentNode.id, currentNode);
    for (var _i = 0, _a = currentNode.outgoingEdges; _i < _a.length; _i++) {
        var outgoingEdge = _a[_i];
        collectReachableNodes(outgoingEdge.target, reachableNodes);
    }
}
function collectUnreachableNodes(node, reachableNodes, unreachableNodes, visitedNodes) {
    if (visitedNodes.contains(node.id)) {
        return;
    }
    visitedNodes.add(node.id);
    if (!reachableNodes.containsKey(node.id)) {
        unreachableNodes.set(node.id, node);
    }
    for (var _i = 0, _a = node.incomingEdges; _i < _a.length; _i++) {
        var incomingEdge = _a[_i];
        collectUnreachableNodes(incomingEdge.source, reachableNodes, unreachableNodes, visitedNodes);
    }
    for (var _b = 0, _c = node.outgoingEdges; _b < _c.length; _b++) {
        var outgoingEdge = _c[_b];
        collectUnreachableNodes(outgoingEdge.target, reachableNodes, unreachableNodes, visitedNodes);
    }
}
function removeUnreachableNode(node) {
    for (var _i = 0, _a = node.incomingEdges; _i < _a.length; _i++) {
        var incomingEdge = _a[_i];
        ArrayUtils.removeElementFromArray(incomingEdge, incomingEdge.source.outgoingEdges);
    }
    for (var _b = 0, _c = node.outgoingEdges; _b < _c.length; _b++) {
        var outgoingEdge = _c[_b];
        ArrayUtils.removeElementFromArray(outgoingEdge, outgoingEdge.target.incomingEdges);
    }
    node.incomingEdges = [];
    node.outgoingEdges = [];
}
