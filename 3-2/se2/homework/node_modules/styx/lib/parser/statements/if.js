"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var negator_1 = require("../expressions/negator");
var stringifier_1 = require("../expressions/stringifier");
var statement_1 = require("./statement");
function parseIfStatement(ifStatement, currentNode, context) {
    return ifStatement.alternate === null
        ? parseSimpleIfStatement(ifStatement, currentNode, context)
        : parseIfElseStatement(ifStatement, currentNode, context);
}
exports.parseIfStatement = parseIfStatement;
function parseSimpleIfStatement(ifStatement, currentNode, context) {
    var negatedTest = negator_1.negateTruthiness(ifStatement.test);
    var thenLabel = stringifier_1.stringify(ifStatement.test);
    var elseLabel = stringifier_1.stringify(negatedTest);
    var thenNode = context
        .createNode()
        .appendConditionallyTo(currentNode, thenLabel, ifStatement.test);
    var thenBranchCompletion = statement_1.parseStatement(ifStatement.consequent, thenNode, context);
    var finalNode = context
        .createNode()
        .appendConditionallyTo(currentNode, elseLabel, negatedTest);
    if (thenBranchCompletion.normal) {
        finalNode.appendEpsilonEdgeTo(thenBranchCompletion.normal);
    }
    return { normal: finalNode };
}
function parseIfElseStatement(ifStatement, currentNode, context) {
    // Then branch
    var thenLabel = stringifier_1.stringify(ifStatement.test);
    var thenNode = context
        .createNode()
        .appendConditionallyTo(currentNode, thenLabel, ifStatement.test);
    var thenBranchCompletion = statement_1.parseStatement(ifStatement.consequent, thenNode, context);
    // Else branch
    var negatedTest = negator_1.negateTruthiness(ifStatement.test);
    var elseLabel = stringifier_1.stringify(negatedTest);
    var elseNode = context
        .createNode()
        .appendConditionallyTo(currentNode, elseLabel, negatedTest);
    var elseBranchCompletion = statement_1.parseStatement(ifStatement.alternate, elseNode, context);
    var finalNode = context.createNode();
    if (thenBranchCompletion.normal) {
        finalNode.appendEpsilonEdgeTo(thenBranchCompletion.normal);
    }
    if (elseBranchCompletion.normal) {
        finalNode.appendEpsilonEdgeTo(elseBranchCompletion.normal);
    }
    return { normal: finalNode };
}
