"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var block_1 = require("./block");
function parseTryStatement(tryStatement, currentNode, context) {
    var handler = tryStatement.handlers[0];
    var finalizer = tryStatement.finalizer;
    var parseFinalizer = function () {
        var finalizerBodyEntry = context.createNode();
        var finalizerBodyCompletion = block_1.parseBlockStatement(finalizer, finalizerBodyEntry, context);
        return {
            bodyEntry: finalizerBodyEntry,
            bodyCompletion: finalizerBodyCompletion
        };
    };
    var handlerBodyEntry = handler ? context.createNode() : null;
    var enclosingTryStatement = {
        label: null,
        breakTarget: null,
        continueTarget: null,
        type: 0 /* TryStatement */,
        isCurrentlyInTryBlock: false,
        isCurrentlyInFinalizer: false,
        handler: handler,
        handlerBodyEntry: handlerBodyEntry,
        parseFinalizer: finalizer ? parseFinalizer : null
    };
    context.enclosingStatements.push(enclosingTryStatement);
    enclosingTryStatement.isCurrentlyInTryBlock = true;
    var tryBlockCompletion = block_1.parseBlockStatement(tryStatement.block, currentNode, context);
    enclosingTryStatement.isCurrentlyInTryBlock = false;
    var handlerBodyCompletion = handler
        ? block_1.parseBlockStatement(handler.body, handlerBodyEntry, context)
        : null;
    context.enclosingStatements.pop();
    // try/catch production?
    if (handler && !finalizer) {
        return parseTryCatch(tryBlockCompletion, handlerBodyCompletion, context);
    }
    // try/finally production?
    if (!handler && finalizer) {
        return parseTryFinally(tryBlockCompletion, parseFinalizer, context);
    }
    // try/catch/finally production
    return parseTryCatchFinally(tryBlockCompletion, handlerBodyCompletion, parseFinalizer, context);
}
exports.parseTryStatement = parseTryStatement;
function parseTryCatch(tryBlockCompletion, handlerBodyCompletion, context) {
    var finalNode = context.createNode();
    if (tryBlockCompletion.normal) {
        finalNode.appendEpsilonEdgeTo(tryBlockCompletion.normal);
    }
    if (handlerBodyCompletion.normal) {
        finalNode.appendEpsilonEdgeTo(handlerBodyCompletion.normal);
    }
    return { normal: finalNode };
}
function parseTryFinally(tryBlockCompletion, parseFinalizer, context) {
    if (!tryBlockCompletion.normal) {
        return tryBlockCompletion;
    }
    var finalizer = parseFinalizer();
    finalizer.bodyEntry.appendEpsilonEdgeTo(tryBlockCompletion.normal);
    if (finalizer.bodyCompletion.normal) {
        var finalNode = context.createNode();
        finalNode.appendEpsilonEdgeTo(finalizer.bodyCompletion.normal);
        return { normal: finalNode };
    }
    return finalizer.bodyCompletion;
}
function parseTryCatchFinally(tryBlockCompletion, handlerBodyCompletion, parseFinalizer, context) {
    var finalNode = context.createNode();
    if (tryBlockCompletion.normal) {
        var finalizer = parseFinalizer();
        finalizer.bodyEntry.appendEpsilonEdgeTo(tryBlockCompletion.normal);
        if (finalizer.bodyCompletion.normal) {
            finalNode.appendEpsilonEdgeTo(finalizer.bodyCompletion.normal);
            return { normal: finalNode };
        }
        return finalizer.bodyCompletion;
    }
    if (handlerBodyCompletion.normal) {
        var finalizer = parseFinalizer();
        finalizer.bodyEntry.appendEpsilonEdgeTo(handlerBodyCompletion.normal);
        if (finalizer.bodyCompletion.normal) {
            finalNode.appendEpsilonEdgeTo(finalizer.bodyCompletion.normal);
            return { normal: finalNode };
        }
        return finalizer.bodyCompletion;
    }
    return { normal: finalNode };
}
