"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ESTree = require("../../estree");
var estreeFactory_1 = require("../../estreeFactory");
var equalityComparisonOperators = ["==", "===", "!=", "!=="];
function negateTruthiness(expression) {
    if (expression.type === ESTree.NodeType.Literal) {
        var literal = expression;
        if (typeof literal.value === "boolean") {
            return estreeFactory_1.createLiteral(!literal.value);
        }
    }
    else if (expression.type === ESTree.NodeType.UnaryExpression) {
        var unaryExpression = expression;
        if (unaryExpression.operator === "!") {
            return unaryExpression.argument;
        }
    }
    else if (expression.type === ESTree.NodeType.BinaryExpression) {
        var binaryExpression = expression;
        if (equalityComparisonOperators.indexOf(binaryExpression.operator) > -1) {
            return invertEqualityComparisonOperator(binaryExpression);
        }
    }
    else if (expression.type === ESTree.NodeType.LogicalExpression) {
        return invertLogicalExpression(expression);
    }
    return estreeFactory_1.createUnaryNegationExpression(expression);
}
exports.negateTruthiness = negateTruthiness;
function invertEqualityComparisonOperator(binaryExpression) {
    var isNegated = binaryExpression.operator.charAt(0) === "!";
    var firstCharOfInvertedOperator = isNegated ? "=" : "!";
    var restOfInvertedOperator = binaryExpression.operator.substr(1);
    return {
        type: ESTree.NodeType.BinaryExpression,
        operator: firstCharOfInvertedOperator + restOfInvertedOperator,
        left: binaryExpression.left,
        right: binaryExpression.right
    };
}
function invertLogicalExpression(logicalExpression) {
    // The only two logical operators are && and ||
    var invertedOperator = logicalExpression.operator === "&&" ? "||" : "&&";
    return {
        type: ESTree.NodeType.LogicalExpression,
        operator: invertedOperator,
        // Perform simplification according to De Morgan's laws
        left: negateTruthiness(logicalExpression.left),
        right: negateTruthiness(logicalExpression.right)
    };
}
