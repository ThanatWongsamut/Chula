"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var stringifier_1 = require("../expressions/stringifier");
var block_1 = require("../statements/block");
var stack_1 = require("../../collections/stack");
var ESTree = require("../../estree");
var estreeFactory_1 = require("../../estreeFactory");
var flow_1 = require("../../flow");
function parseFunctionDeclaration(functionDeclaration, currentNode, context) {
    var entryNode = context.createNode(flow_1.NodeType.Entry);
    var successExitNode = context.createNode(flow_1.NodeType.SuccessExit);
    var errorExitNode = context.createNode(flow_1.NodeType.ErrorExit);
    var func = {
        id: context.createFunctionId(),
        name: functionDeclaration.id.name,
        flowGraph: {
            entry: entryNode,
            successExit: successExitNode,
            errorExit: errorExitNode,
            nodes: [],
            edges: []
        }
    };
    var functionContext = {
        functions: context.functions,
        currentFlowGraph: func.flowGraph,
        enclosingStatements: stack_1.Stack.create(),
        createTemporaryLocalVariableName: context.createTemporaryLocalVariableName,
        createNode: context.createNode,
        createFunctionId: context.createFunctionId
    };
    var endOfParamAssignments = explicitlyAssignParameterValues(functionDeclaration, entryNode, context);
    var completion = block_1.parseBlockStatement(functionDeclaration.body, endOfParamAssignments, functionContext);
    if (completion.normal) {
        // If we reached this point, the function didn't end with an explicit return statement.
        // Thus, an implicit "undefined" is returned.
        var undefinedReturnValue = {
            type: ESTree.NodeType.Identifier,
            name: "undefined"
        };
        var returnStatement = {
            type: ESTree.NodeType.ReturnStatement,
            argument: undefinedReturnValue
        };
        func.flowGraph.successExit.appendTo(completion.normal, "return undefined", returnStatement, flow_1.EdgeType.AbruptCompletion);
    }
    context.functions.push(func);
    return { normal: currentNode };
}
exports.parseFunctionDeclaration = parseFunctionDeclaration;
function explicitlyAssignParameterValues(functionDeclaration, currentNode, context) {
    var specialParamsArray = estreeFactory_1.createIdentifier("$$params");
    functionDeclaration.params.forEach(function (param, index) {
        var indexedParamAccess = {
            type: ESTree.NodeType.MemberExpression,
            computed: true,
            object: specialParamsArray,
            property: estreeFactory_1.createLiteral(index)
        };
        var paramAssignment = estreeFactory_1.createAssignmentExpression({
            left: param,
            right: indexedParamAccess
        });
        currentNode = context
            .createNode()
            .appendTo(currentNode, stringifier_1.stringify(paramAssignment), paramAssignment);
    });
    return currentNode;
}
